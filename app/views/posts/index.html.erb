<div class="max-w-2xl mx-auto">
  <!-- Post Creation Form -->
  <div class="bg-white rounded-lg shadow p-6 mb-6">
    <h2 class="text-lg font-semibold mb-4">What's on your mind?</h2>

    <%= form_with model: @post, local: true, class: "space-y-4" do |form| %>
      <% if @post.errors.any? %>
        <div class="bg-red-50 border border-red-200 rounded-md p-4">
          <h4 class="text-red-800 font-medium">Please fix the following errors:</h4>
          <ul class="mt-2 text-sm text-red-600">
            <% @post.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <div>
        <%= form.text_area :content,
            placeholder: "Share something interesting...",
            rows: 3,
            maxlength: 280,
            class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none" %>
        <div class="flex justify-between items-center mt-2">
          <div class="flex space-x-2">
            <button type="button" id="emoji-btn" class="text-gray-500 hover:text-blue-500 p-1 rounded">
              ðŸ˜Š
            </button>
            <button type="button" id="gif-btn" class="text-gray-500 hover:text-blue-500 p-1 rounded text-sm font-medium">
              GIF
            </button>
            <label for="post_images" class="text-gray-500 hover:text-blue-500 p-1 rounded cursor-pointer">
              ðŸ“·
              <%= form.file_field :images,
                  multiple: true,
                  accept: "image/*",
                  class: "hidden",
                  id: "post_images",
                  onchange: "previewImages(this)" %>
            </label>
          </div>
          <p class="text-xs text-gray-500">
            <span id="char-count">0</span>/280 characters
          </p>
        </div>
        <!-- Emoji Picker Container -->
        <div id="emoji-picker" class="hidden mt-2">
          <emoji-picker></emoji-picker>
        </div>
        <!-- GIF Picker Container -->
        <div id="gif-picker" class="hidden mt-2 max-h-64 overflow-y-auto border rounded-lg p-4 bg-white">
          <div class="mb-3">
            <input type="text" id="gif-search" placeholder="Search GIFs..."
                   class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
          </div>
          <div id="gif-results" class="grid grid-cols-2 gap-2">
          </div>
        </div>
        <!-- Image Preview Container -->
        <div id="image-preview" class="hidden mt-2">
          <div class="grid grid-cols-2 gap-2" id="preview-grid">
          </div>
        </div>
      </div>

      <div class="flex justify-end">
        <%= form.submit "Post",
            class: "bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 disabled:bg-gray-300",
            id: "post-submit" %>
      </div>
    <% end %>
  </div>

  <!-- Feed -->
  <div class="space-y-4">
    <% if @posts.any? %>
      <% @posts.each do |post| %>
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-start space-x-3">
            <!-- Avatar -->
            <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold flex-shrink-0">
              <%= post.user.name.first.upcase %>
            </div>

            <!-- Post Content -->
            <div class="flex-1 min-w-0">
              <div class="flex items-center space-x-2">
                <h3 class="font-semibold text-gray-900">
                  <%= post.user.account&.name || post.user.name %>
                </h3>
                <% if post.user.account&.handle %>
                  <span class="text-gray-500 text-sm">@<%= post.user.account.handle %></span>
                <% end %>
                <span class="text-gray-400 text-sm">Â·</span>
                <time class="text-gray-400 text-sm" datetime="<%= post.created_at.iso8601 %>">
                  <%= time_ago_in_words(post.created_at) %> ago
                </time>
              </div>

              <div class="mt-2">
                <p class="text-gray-900 whitespace-pre-wrap"><%= simple_format(post.content) %></p>
              </div>

              <!-- Post Images -->
              <% if post.images.any? %>
                <div class="mt-3">
                  <div class="grid <%= post.images.count == 1 ? 'grid-cols-1' : 'grid-cols-2' %> gap-2">
                    <% post.images.each do |image| %>
                      <div class="relative">
                        <%= image_tag image.variant(resize_to_limit: [400, 400]),
                            class: "w-full h-48 object-cover rounded-lg cursor-pointer hover:opacity-90",
                            onclick: "openImageModal('#{url_for(image)}', '#{post.user.name} post image')" %>
                      </div>
                    <% end %>
                  </div>
                </div>
              <% end %>

              <!-- Action Buttons -->
              <div class="flex items-center justify-between mt-4">
                <div class="flex space-x-4">
                  <%= link_to post_path(post),
                      class: "text-gray-500 hover:text-blue-500 text-sm flex items-center space-x-1" do %>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                    </svg>
                    <span><%= post.comments_count %> <%= "comment".pluralize(post.comments_count) %></span>
                  <% end %>
                </div>

                <% if post.user == current_user %>
                  <%= link_to post_path(post),
                      method: :delete,
                      data: {
                        confirm: "Are you sure you want to delete this post?"
                      },
                      class: "text-red-500 hover:text-red-700 text-sm" do %>
                    Delete
                  <% end %>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    <% else %>
      <div class="bg-white rounded-lg shadow p-8 text-center">
        <p class="text-gray-500">No posts yet. Be the first to share something!</p>
      </div>
    <% end %>
  </div>
</div>

<script>
  // Character counter
  const textarea = document.querySelector('#post_content');
  const charCount = document.querySelector('#char-count');
  const submitBtn = document.querySelector('#post-submit');

  if (textarea) {
    textarea.addEventListener('input', function() {
      const length = this.value.length;
      charCount.textContent = length;

      if (length > 280) {
        charCount.classList.add('text-red-500');
        submitBtn.disabled = true;
      } else {
        charCount.classList.remove('text-red-500');
        submitBtn.disabled = false;
      }
    });
  }

  // Emoji Picker
  const emojiBtn = document.querySelector('#emoji-btn');
  const emojiPicker = document.querySelector('#emoji-picker');
  const gifBtn = document.querySelector('#gif-btn');
  const gifPicker = document.querySelector('#gif-picker');
  const gifSearch = document.querySelector('#gif-search');
  const gifResults = document.querySelector('#gif-results');

  if (emojiBtn && emojiPicker) {
    emojiBtn.addEventListener('click', function() {
      emojiPicker.classList.toggle('hidden');
      gifPicker.classList.add('hidden');
    });

    // Handle emoji selection
    document.querySelector('emoji-picker').addEventListener('emoji-click', event => {
      const emoji = event.detail.emoji.unicode;
      const currentPos = textarea.selectionStart;
      const textBefore = textarea.value.substring(0, currentPos);
      const textAfter = textarea.value.substring(currentPos);

      textarea.value = textBefore + emoji + textAfter;
      textarea.selectionStart = textarea.selectionEnd = currentPos + emoji.length;

      // Update character count
      textarea.dispatchEvent(new Event('input'));
      emojiPicker.classList.add('hidden');
      textarea.focus();
    });
  }

  // GIF Picker
  if (gifBtn && gifPicker) {
    gifBtn.addEventListener('click', function() {
      gifPicker.classList.toggle('hidden');
      emojiPicker.classList.add('hidden');
    });

    // GIF Search
    let searchTimeout;
    if (gifSearch) {
      gifSearch.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        const query = this.value.trim();

        if (query.length > 2) {
          searchTimeout = setTimeout(() => {
            searchGifs(query);
          }, 300);
        } else {
          gifResults.innerHTML = '';
        }
      });
    }
  }

  // Search GIFs using GIPHY API (you'll need to get a free API key)
  async function searchGifs(query) {
    const apiKey = 'your_giphy_api_key_here'; // Replace with actual API key
    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${query}&limit=8`;

    try {
      // For demo purposes, show placeholder GIFs
      showPlaceholderGifs(query);
    } catch (error) {
      console.error('Error fetching GIFs:', error);
      gifResults.innerHTML = '<p class="text-gray-500 text-sm">Error loading GIFs</p>';
    }
  }

  // Show placeholder GIFs for demo
  function showPlaceholderGifs(query) {
    const placeholderGifs = [
      'https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif',
      'https://media.giphy.com/media/26ufdipQqU2lhNA4g/giphy.gif',
      'https://media.giphy.com/media/3o6Zt481isNVuQI1l6/giphy.gif',
      'https://media.giphy.com/media/l0HlvtIPzPdt2usKs/giphy.gif'
    ];

    gifResults.innerHTML = '';
    placeholderGifs.forEach(url => {
      const gifDiv = document.createElement('div');
      gifDiv.innerHTML = `
        <img src="${url}" class="w-full h-20 object-cover rounded cursor-pointer hover:opacity-75"
             onclick="insertGif('${url}')" alt="GIF">
      `;
      gifResults.appendChild(gifDiv);
    });
  }

  // Insert GIF into textarea
  function insertGif(gifUrl) {
    const gifText = ` [GIF: ${gifUrl}] `;
    const currentPos = textarea.selectionStart;
    const textBefore = textarea.value.substring(0, currentPos);
    const textAfter = textarea.value.substring(currentPos);

    textarea.value = textBefore + gifText + textAfter;
    textarea.selectionStart = textarea.selectionEnd = currentPos + gifText.length;

    // Update character count
    textarea.dispatchEvent(new Event('input'));
    gifPicker.classList.add('hidden');
    textarea.focus();
  }

  // Close pickers when clicking outside
  document.addEventListener('click', function(event) {
    if (!event.target.closest('#emoji-picker') && !event.target.closest('#emoji-btn')) {
      emojiPicker?.classList.add('hidden');
    }
    if (!event.target.closest('#gif-picker') && !event.target.closest('#gif-btn')) {
      gifPicker?.classList.add('hidden');
    }
  });

  // Image preview function
  function previewImages(input) {
    const preview = document.getElementById('image-preview');
    const previewGrid = document.getElementById('preview-grid');

    previewGrid.innerHTML = '';

    if (input.files && input.files.length > 0) {
      preview.classList.remove('hidden');

      Array.from(input.files).forEach((file, index) => {
        if (index >= 4) return; // Max 4 images

        const reader = new FileReader();
        reader.onload = function(e) {
          const imageDiv = document.createElement('div');
          imageDiv.className = 'relative';
          imageDiv.innerHTML = `
            <img src="${e.target.result}" class="w-full h-24 object-cover rounded">
            <button type="button" onclick="removeImage(${index})"
                    class="absolute top-1 right-1 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center hover:bg-red-600">
              Ã—
            </button>
          `;
          previewGrid.appendChild(imageDiv);
        };
        reader.readAsDataURL(file);
      });
    } else {
      preview.classList.add('hidden');
    }
  }

  // Remove image function
  function removeImage(index) {
    const input = document.getElementById('post_images');
    const dt = new DataTransfer();

    Array.from(input.files).forEach((file, i) => {
      if (i !== index) {
        dt.items.add(file);
      }
    });

    input.files = dt.files;
    previewImages(input);
  }
</script>
